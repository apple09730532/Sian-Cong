import requests
import datetime
import time
import csv
import sys

def make_date_range(start,end):
    start,end = datetime.datetime.strptime(start,"%Y-%m-%d").date() , datetime.datetime.strptime(end,"%Y-%m-%d").date()
    dates,count = [],0
    while True:
        thisDay = start + datetime.timedelta(days=+count)
        dates.append(thisDay)
        if thisDay >= end:
            break
        else:
            count += 1
    return map(lambda date:date.strftime("%Y%m%d"),dates)

def getDayData(date):
    try:
        #Set Parameters
        params={
            "isPagination":True,
            "sqlId":"COMMON_SSE_ZQPZ_YSP_QQ_SJTJ_MRTJ_CX",
            "tradeDate":date,
            "pageHelp.pageSize":5,
            "pageHelp.pageNo":1,
            "pageHelp.beginPage":1,
            "pageHelp.cacheSize":1,
            "pageHelp.endPage":5
            }
        headers = {"Referer":"http://www.sse.com.cn/assortment/options/date/"}
        #Set Headers
        response = requests.get("http://query.sse.com.cn/commonQuery.do",params=params,headers=headers).json()
        #Has Data or not?
        if len(response["result"]) == 0:
            return None
        else:
            return response["result"][0]
    except:
        return False

if __name__ == "__main__":
    start,end = sys.argv[1],sys.argv[2]
    print "Retrieve data from",start,"to",end,'.'
    jobs_tracker = dict.fromkeys(make_date_range(start,end),0)
    results = []
    while True:
        print "\nJobs:",jobs_tracker
        currentJobs = filter(lambda job:job[1] is not True and job[1] < 30, jobs_tracker.items())
        currentJobs = map(lambda x:x[0],currentJobs)
        # If there is no job in currentJobs (all jobs are done or exceeded try limit) ,then break.
        if len(currentJobs) == 0:
            break
        #Do Job
        for date in currentJobs:
            print "Retrieving:",date
            result = getDayData(date)
            if result is False: #Exception happen, adding try count. 
                jobs_tracker[date] += 1
            else:               #Receive data successfully or there is no data at that day.
                if result is not None: #If that day has data, then add into results
                    results.append(result)
                jobs_tracker[date] = True
            time.sleep(1)

    with open('output.txt', 'w') as csvfile:
        fieldnames = [
            u'TRADE_DATE',
            u'SECURITY_CODE',
            u'SECURITY_ABBR',
            u'TOTAL_VOLUME',
            u'CALL_VOLUME',
            u'PUT_VOLUME',
            u'CP_RATE',
            u'LEAVES_QTY',
            u'LEAVES_CALL_QTY',
            u'LEAVES_PUT_QTY',
            u'NUM',
            ]
        writer = csv.DictWriter(csvfile,delimiter=':', fieldnames=fieldnames)
        writer.writeheader()
        for row in results:
            writer.writerow(row)

